#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'viralligator_types'

module Viralligator
  class Client
    include ::Thrift::Client

    def publish(url, tags)
      send_publish(url, tags)
      recv_publish()
    end

    def send_publish(url, tags)
      send_message('publish', Publish_args, :url => url, :tags => tags)
    end

    def recv_publish()
      result = receive_message(Publish_result)
      return
    end

    def sharings(tags)
      send_sharings(tags)
      return recv_sharings()
    end

    def send_sharings(tags)
      send_message('sharings', Sharings_args, :tags => tags)
    end

    def recv_sharings()
      result = receive_message(Sharings_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sharings failed: unknown result')
    end

    def shares_by_url(url)
      send_shares_by_url(url)
      return recv_shares_by_url()
    end

    def send_shares_by_url(url)
      send_message('shares_by_url', Shares_by_url_args, :url => url)
    end

    def recv_shares_by_url()
      result = receive_message(Shares_by_url_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'shares_by_url failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_publish(seqid, iprot, oprot)
      args = read_args(iprot, Publish_args)
      result = Publish_result.new()
      @handler.publish(args.url, args.tags)
      write_result(result, oprot, 'publish', seqid)
    end

    def process_sharings(seqid, iprot, oprot)
      args = read_args(iprot, Sharings_args)
      result = Sharings_result.new()
      result.success = @handler.sharings(args.tags)
      write_result(result, oprot, 'sharings', seqid)
    end

    def process_shares_by_url(seqid, iprot, oprot)
      args = read_args(iprot, Shares_by_url_args)
      result = Shares_by_url_result.new()
      result.success = @handler.shares_by_url(args.url)
      write_result(result, oprot, 'shares_by_url', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Publish_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    URL = 1
    TAGS = 2

    FIELDS = {
      URL => {:type => ::Thrift::Types::STRING, :name => 'url'},
      TAGS => {:type => ::Thrift::Types::LIST, :name => 'tags', :default => [
      ], :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Publish_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Sharings_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TAGS = 1

    FIELDS = {
      TAGS => {:type => ::Thrift::Types::LIST, :name => 'tags', :default => [
      ], :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Sharings_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Sharing}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Shares_by_url_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    URL = 1

    FIELDS = {
      URL => {:type => ::Thrift::Types::STRING, :name => 'url'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Shares_by_url_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Sharing}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

